// main method
import java.util.Scanner;

public class Tweet
{

   public static void main(String[] args) throws Exception {
      
      System.out.println("--Testing the Email--");
      
      Email m1 = new Email();
      Email m2 = new Email("a@a.com", "a@a.com", "bark bark");
      Email m3 = new Email("%%%%%", "shkhka", "aaaa");

      System.out.println(m1.toString());
      System.out.println(m2.toString());
      System.out.println(m3.toString());
      
      System.out.println("--Testing the Message--");
      System.out.println("Type new message: ");
      
      Scanner scanner = new Scanner(System.in);  // Create a Scanner object

      String Message = scanner.nextLine();  // Read user input
      System.out.println("New Message: " + Message);  // Output user input
            
      Message n1 = new Message();
      Message n2 = new Message("hello world");
      
      System.out.println(n1.toString());
      System.out.println(n2.toString());
      
      System.out.println("--Testing the Shweet--");
      
      Shweet s1 = new Shweet();
      
      System.out.println(s1.toString());
      
      
  }
}

------------------------------------------- End of main ---------------------------------------------

// Email class
public class Email extends Message {
   // constants for the maximum length of the email and a Default email.
    public static int MAX_EMAIL_ADDRESS_LENGTH = 50;
    public static String DEFAULT_EMAIL_ADDRESS = "default@default.com";

    private String fromAddress;
    private String toAddress;
    
    // booleans, if the to addres and the from address are invalid the computer will use the default email.
    public Email(String fromAddress, String toAddress, String message) {
        super(message);
        if (!setFromAddress(fromAddress))
            setFromAddress(DEFAULT_EMAIL_ADDRESS);
        if (!setToAddress(toAddress))
            setToAddress(DEFAULT_EMAIL_ADDRESS);
    }
   
    public Email() {
        this(DEFAULT_EMAIL_ADDRESS, DEFAULT_EMAIL_ADDRESS, DFAULT_MSG);
    }

    public boolean setFromAddress(String address) {
        if (!isValidEmailAddress(address))
            return false;
        fromAddress = address;
        return true;
    }

    public boolean setToAddress(String address) {
        if (!isValidEmailAddress(address))
            return false;
        toAddress = address;
        return true;
    }

    public String getFromAddress() {
        return fromAddress;
    }

    public String getToAddress() {
        return toAddress;
    }

    public String toString() {
        return "From: " + fromAddress + "\nTo: " + toAddress + "\n" + super.toString();
    }

    private boolean isValidEmailAddress(String s) {
        return (s.length() <= MAX_EMAIL_ADDRESS_LENGTH && s.contains("@") && s.contains("."));
    }
}

---------------------------------- End of E-mail class -------------------------------------------

/**
 * CS1B, Assignment 4, "Email, Shwitter and Inheritance"<br>
 * Quarter: Winter 2020, Professor: David Harden<br>
 * 
 * This class contains three classes and a main. A super class named Message and two sub classes
 * named Email and Shwitter. These subclasses carry some inheritance. The shwitter carries some
 * methods from the email class and from the message class, while the email carries methods from
 * the super class, Message. These classes also contain a main class, which tests the email class,
 * Message, and the Shwitter class. 
 * 
 */

public class Message
{  
   // constant used to set the the max lenth of the message, and a default message.
   public static int MAX_MSG_LENGTH = 100000;
   public static String DFAULT_MSG = "Some Messages just aren't worth sending.";

   private String message;
   // method to test if the message is valid else it will use the default message.
   public Message(String message) {
       if (!setMsg(message))
           setMsg(DFAULT_MSG);
   }

   public Message() {
       this(DFAULT_MSG);
   }
   // boolean used to check if the message is valid.
   public boolean setMsg(String message) {
       if (!isValidMsg(message)) {
           this.message = "Acceptable length should be:" +message;
           return false;
       }
       this.message = message;
       return true;
   }

   public String getMsg() {
       return this.message;
   }

   public String toString() {
       return "  Message ---------------\n" + this.message;
   }
   // The maximum length of the message to be valid.
   private boolean isValidMsg(String s) {
       return s.length() <= MAX_MSG_LENGTH;
   }
}

---------------------------------------- End of Message class --------------------------------------------

// Shwitter Class
public class Shweet extends Message {
    public static int MAX_SHWEETER_ID_LENGTH = 15;
    public static int MAX_SHWEET_LENGTH = 140;
    public static String DEFAULT_USER_ID = "DEFAULT_ID";

    private String fromID;

    public Shweet(String fromID, String message) {
        if (!setFromID(fromID))
            setFromID(DEFAULT_USER_ID);
        if (!setMsg(message))
            setMsg(DFAULT_MSG);
    }

    public Shweet() {
        this(DEFAULT_USER_ID, DFAULT_MSG);
    }

    public boolean setFromID(String fromID) {
        if (!isValidShweeterID(fromID))
            return false;
        this.fromID = fromID;
        return true;
    }

    public String getFromID() {
        return fromID;
    }

    public boolean setMsg(String message) {
        if (!isValidShweet(message)) {
            super.setMsg("SHWEET TOO LONG!!!");
            return false;
        }
        super.setMsg(message);
        return true;
    }

    public String toString() {
        return "Shweet: @" + fromID + "\n" + getMsg();
    }

    private boolean isValidShweet(String s) {
        return s.length() <= MAX_SHWEET_LENGTH;
    }

    private boolean isValidShweeterID(String s) {
        return (s.length() <= MAX_SHWEETER_ID_LENGTH && stringHasOnlyAlphaOrNumOrUnderscore(s));
    }

    private boolean stringHasOnlyAlphaOrNumOrUnderscore(String s) {
        boolean result = true;
        for (int i = 0; i < s.length(); i++)
            result = result && charIsAlphaOrNumOrUnderscore(s.charAt(i));
        return result;
    }

    private boolean charIsAlphaOrNumOrUnderscore(char c) {
        return (charIsAlpha(c) || charIsNum(c) || charIsUnderscore(c));
    }

    private boolean charIsAlpha(char c) {
        return ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));
    }

    private boolean charIsNum(char c) {
        return (c >= '0' && c <= '9');
    }

    private boolean charIsUnderscore(char c) {
        return c == '_';
    }
}
